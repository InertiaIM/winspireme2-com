imports:
    - { resource: parameters.yml }
    - { resource: security.yml }

framework:
    #esi:             ~
    translator:      { fallback: "%locale%" }
    secret:          "%secret%"
    router:
        resource: "%kernel.root_dir%/config/routing.yml"
        strict_requirements: "%kernel.debug%"
    form:            true
    csrf_protection: true
    validation:      { enable_annotations: true }
    templating:      { engines: ['twig'] } #assets_version: SomeVersionScheme
    default_locale:  "%locale%"
    trust_proxy_headers: false # Whether or not the Request object should trust proxy headers (X_FORWARDED_FOR/HTTP_CLIENT_IP)
    session:
        name: "%session_name%"
        cookie_domain: "%session_domain%"

# Twig Configuration
twig:
    debug:            "%kernel.debug%"
    strict_variables: "%kernel.debug%"

# Assetic Configuration
assetic:
    debug:          "%kernel.debug%"
    use_controller: false
    #java: /usr/bin/java
    filters:
        cssrewrite: ~
        #closure:
        #    jar: "%kernel.root_dir%/Resources/java/compiler.jar"
        #yui_css:
        #    jar: "%kernel.root_dir%/Resources/java/yuicompressor-2.4.7.jar"
        lessphp:
            file: "%kernel.root_dir%/../vendor/leafo/lessphp/lessc.inc.php"
            apply_to: "\.less$"

# Doctrine Configuration
doctrine:
    dbal:
        driver:   "%database_driver%"
        host:     "%database_host%"
        port:     "%database_port%"
        dbname:   "%database_name%"
        user:     "%database_user%"
        password: "%database_password%"
        charset:  UTF8

    orm:
        auto_generate_proxy_classes: %kernel.debug%
        entity_managers:
            default:
                auto_mapping: true
                mappings:
                    StofDoctrineExtensionsBundle: ~
                    gedmo_tree:
                        type: annotation
                        prefix: Gedmo\Tree\Entity
                        dir: "%kernel.root_dir%/../vendor/gedmo/doctrine-extensions/lib/Gedmo/Tree/Entity"
                        is_bundle: false

# Swiftmailer Configuration
swiftmailer:
    transport:  "%mailer_transport%"
    host:       "%mailer_host%"
    username:   "%mailer_user%"
    password:   "%mailer_password%"
    encryption: "%mailer_encryption%"
    logging:    true


mz_mail_chimp:
    api_key: "%mailchimp_key%"
    default_list: "%mailchimp_list%"
    ssl: true


sphinxsearch:
    indexes:
        Packages: test1
    searchd:
        host:   localhost
        port:   9312
    indexer:
        bin:    "%sphinx_indexer%"


fos_user:
    db_driver: orm
    firewall_name: main
    user_class: Inertia\WinspireBundle\Entity\User
    service:
        mailer: fos_user.mailer.twig_swift
    resetting:
        email:
            template: InertiaWinspireBundle:Email:password-reset-link.html.twig
            from_email:
                address:        notice@winspireme.com
                sender_name:    Winspire

stof_doctrine_extensions:
    default_locale: en_US
    orm:
        default:
            tree: true

ddeboer_salesforce_client:
    username: "%sf_username%"
    password: "%sf_password%"
    token:    "%sf_token%"
    wsdl:     "%kernel.root_dir%/config/salesforce/%sf_wsdl%"
    logging:  false

# not sure why this is necessary
be_simple_soap:
    clients:
        force_this_to_work:
            wsdl: blah

services:
    twig.extension.text:
        class: Twig_Extensions_Extension_Text
        tags:
            - { name: twig.extension }
            
    account_soap_service:
        class: Inertia\WinspireBundle\Services\AccountSoapService
        arguments: [@ddeboer_salesforce_client, @doctrine.orm.entity_manager, @logger, @mailer, @templating]
        
    contact_soap_service:
        class: Inertia\WinspireBundle\Services\ContactSoapService
        arguments: [@ddeboer_salesforce_client, @doctrine.orm.entity_manager, @logger, @mailer, @templating]
        
    package_soap_service:
        class: Inertia\WinspireBundle\Services\PackageSoapService
        arguments: [@ddeboer_salesforce_client, @doctrine.orm.entity_manager, @logger, @search.sphinxsearch.indexer]
        
    suitcase_soap_service:
        class: Inertia\WinspireBundle\Services\SuitcaseSoapService
        arguments: [@ddeboer_salesforce_client, @doctrine.orm.entity_manager, @logger, @mailer, @templating]
    
    # Doctrine Extension listeners to handle behaviors
    gedmo.listener.timestampable:
        class: Gedmo\Timestampable\TimestampableListener
        tags:
            - { name: doctrine.event_subscriber, connection: default }
        calls:
            - [ setAnnotationReader, [ @annotation_reader ] ]
            
    comment_service:
        class: Inertia\WinspireBundle\Consumer\CommentConsumer
        arguments: [@doctrine.orm.entity_manager, @mailer, @templating]
        
    contact_service:
        class: Inertia\WinspireBundle\Consumer\ContactConsumer
        arguments: [@doctrine.orm.entity_manager, @mailer, @templating]
        
    pack_suitcase_service:
        class: Inertia\WinspireBundle\Consumer\PackSuitcaseConsumer
        arguments: [@doctrine.orm.entity_manager, @mailer, @templating, @ddeboer_salesforce_client]
        
    create_account_service:
        class: Inertia\WinspireBundle\Consumer\CreateAccountConsumer
        arguments: [@doctrine.orm.entity_manager, @mailer, @templating, @mailchimp, @ddeboer_salesforce_client]
        
    create_suitcase_service:
        class: Inertia\WinspireBundle\Consumer\CreateSuitcaseConsumer
        arguments: [@doctrine.orm.entity_manager, @mailer, @templating, @ddeboer_salesforce_client]
        
    unpack_suitcase_service:
        class: Inertia\WinspireBundle\Consumer\UnpackSuitcaseConsumer
        arguments: [@doctrine.orm.entity_manager, @mailer, @templating, @ddeboer_salesforce_client]
        
    share_suitcase_service:
        class: Inertia\WinspireBundle\Consumer\ShareSuitcaseConsumer
        arguments: [@doctrine.orm.entity_manager, @mailer, @templating]
        
    winspire.consumer.booking_update:
        class: Inertia\WinspireBundle\Consumer\BookingUpdateConsumer
        arguments: [@doctrine.orm.entity_manager, @mailer, @templating, @ddeboer_salesforce_client]
        
    winspire.consumer.invoice_request:
        class: Inertia\WinspireBundle\Consumer\InvoiceRequestConsumer
        arguments: [@doctrine.orm.entity_manager, @mailer, @templating, @ddeboer_salesforce_client, "%invoice_fee%"]
        
    winspire.consumer.price_update:
        class: Inertia\WinspireBundle\Consumer\PriceUpdateConsumer
        arguments: [@doctrine.orm.entity_manager, @ddeboer_salesforce_client]
        
    winspire.consumer.send_voucher:
        class: Inertia\WinspireBundle\Consumer\SendVoucherConsumer
        arguments: [@doctrine.orm.entity_manager, @mailer, @templating, @ddeboer_salesforce_client]
        
    winspire.consumer.update_sf:
        class: Inertia\WinspireBundle\Consumer\UpdateSfConsumer
        arguments: [@doctrine.orm.entity_manager, @mailer, @ddeboer_salesforce_client]
        
    winspire.soap.booking_service:
        class: Inertia\WinspireBundle\Services\BookingSoapService
        arguments: [@ddeboer_salesforce_client, @doctrine.orm.entity_manager, @logger]
        
    winspire.rest.invoice_service:
        class: Inertia\WinspireBundle\Services\InvoiceRestService
        arguments: [@ddeboer_salesforce_client, @doctrine.orm.entity_manager, @logger,  @mailer, @templating, "%invoice_dir%"]
        
    winspire.suitcase.manager:
        class: Inertia\WinspireBundle\Services\SuitcaseManager
        arguments: [@doctrine.orm.entity_manager, @session, @security.context, @old_sound_rabbit_mq.winspire_producer, "%invoice_dir%", "%invoice_fee%"]

old_sound_rabbit_mq:
    connections:
        default:
            host:      localhost
            port:      5672
            user:      "%rabbitmq_username%"
            password:  "%rabbitmq_password%"
            vhost:     "%rabbitmq_vhost%"
    producers:
        winspire:
            connection: default
            exchange_options: { name: 'winspire', type: direct }
    consumers:
        booking_update:
            connection: default
            exchange_options: { name: 'winspire', type: direct }
            queue_options:    { name: 'winspire-booking-update' }
            callback:         winspire.consumer.booking_update
        comment:
            connection: default
            exchange_options: { name: 'winspire', type: direct }
            queue_options:    { name: 'winspire-comment' }
            callback:         comment_service
        contact:
            connection: default
            exchange_options: { name: 'winspire', type: direct }
            queue_options:    { name: 'winspire-contact' }
            callback:         contact_service
        pack_suitcase:
            connection: default
            exchange_options: { name: 'winspire', type: direct }
            queue_options:    { name: 'winspire-pack-suitcase' }
            callback:         pack_suitcase_service
        create_account:
            connection: default
            exchange_options: { name: 'winspire', type: direct }
            queue_options:    { name: 'winspire-create-account' }
            callback:         create_account_service
        create_suitcase:
            connection: default
            exchange_options: { name: 'winspire', type: direct }
            queue_options:    { name: 'winspire-create-suitcase' }
            callback:         create_suitcase_service
        price_update:
            connection: default
            exchange_options: { name: 'winspire', type: direct }
            queue_options:    { name: 'winspire-price-update' }
            callback:         winspire.consumer.price_update
        unpack_suitcase:
            connection: default
            exchange_options: { name: 'winspire', type: direct }
            queue_options:    { name: 'winspire-unpack-suitcase' }
            callback:         unpack_suitcase_service
        invoice_request:
            connection: default
            exchange_options: { name: 'winspire', type: direct }
            queue_options:    { name: 'winspire-invoice-request' }
            callback:         winspire.consumer.invoice_request
        share_suitcase:
            connection: default
            exchange_options: { name: 'winspire', type: direct }
            queue_options:    { name: 'winspire-share-suitcase' }
            callback:         share_suitcase_service
        send_voucher:
            connection: default
            exchange_options: { name: 'winspire', type: direct }
            queue_options:    { name: 'winspire-send-voucher' }
            callback:         winspire.consumer.send_voucher
        update_sf:
            connection: default
            exchange_options: { name: 'winspire', type: direct }
            queue_options:    { name: 'winspire-update-sf' }
            callback:         winspire.consumer.update_sf